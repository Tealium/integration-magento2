<?php

/** @var Magento\Framework\View\Element\Template  $this */
$helper = $this->helper('Tealium\Tags\Helper\Data');
$store = $this->getStore();

// if Tealium extension is not enabled, return immediately to not render
if (!$helper->isEnabled($store)) {
    return; // not enabled, no javascript inserted
}

// create a tealium object for the page
$tealium = $helper->init($store, $this, "ProductPage")
    ->addCustomDataFromSetup($store, "ProductPage")
    ->getTealiumObject();

// load and use the external config if it's enabled, and render Tealium
// JavaScript code to the page.
if ($helper->getIsExternalScript($store)) {
    $syncType = "sync";
    $externalScriptType = $helper->getExternalScriptType($store);
    if ($externalScriptType == "sync" || $externalScriptType == "async") {
        $syncType = $externalScriptType;
    }
    echo $tealium->render("full", true, $syncType);
} else {
    echo $tealium->render("udo");
}

// Sometimes it's useful to send the entire udo to a server for diagnostics.
// Render a tag in the form of an html <img> element that
// will send the url encoded udo to a specified server if the feature is
// enabled in the config.
echo $helper->getDiagnosticTag($store);

if ($this->getRegestry()->registry('current_product')->getTypeId() == 'configurable'):
    ?>

    <script type="text/javascript">
        require(['jquery'],function($){
            $(function(){
                $('[data-role=priceBox]').on('updatePrice',function(event){
                    var oldPrice = event.target.innerText;
                    var newPrice = oldPrice.substring(1);
                    newPrice.replace(/\n/g, "");
                    console.log(newPrice);
                    var oldUDO = utag_data;
                    oldUDO.product_price = [newPrice];
                    utag.view(oldUDO);
                })
            })
        });
    </script>

<?

endif;
