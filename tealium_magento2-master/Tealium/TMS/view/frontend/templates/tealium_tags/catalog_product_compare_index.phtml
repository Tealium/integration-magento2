<?php

/** @var Magento\Framework\View\Element\Template  $this */
$helper = $this->helper('Tealium\Tags\Helper\Data');
$store = $this->getStore();

// if Tealium extension is not enabled, return immediately to not render
if (!$helper->isEnabled($store)) {
    return; // not enabled, no javascript inserted
}

$ids = array();
$skus = array();
$names = array();

// populate info for each item into local variables
foreach ($this->helper('Magento\Catalog\Helper\Product\Compare')->getItemCollection() as $item) {
    $ids[] = $item->getProductId();
    $skus[] = $item->getSku();
    $names[] = $item->getName();
}

// set some custom data by imploding arrays of ids, skus, and names
$customData = array();
$customData["page_type"] = "product compare";
$customData["product_id"] = implode('","', $ids);
$customData["product_sku"] = implode('","', $skus);
$customData["product_name"] = implode('","', $names);

// create a tealium object for the page with custom data
$tealium = $helper->init($store, $this, "Home")
    ->addCustomDataFromSetup($store, "Home")
    ->addCustomDataFromObject($customData)
    ->getTealiumObject();

// load and use the external config if it's enabled, and render Tealium
// JavaScript code to the page.
if ($helper->getIsExternalScript($store)) {
    $syncType = "sync";
    $externalScriptType = $helper->getExternalScriptType($store);
    if ($externalScriptType == "sync" || $externalScriptType == "async") {
        $syncType = $externalScriptType;
    }
    echo $tealium->render("full", true, $syncType);
} else {
    echo $tealium->render("udo");
}

// Sometimes it's useful to send the entire udo to a server for diagnostics.
// Render a tag in the form of an html <img> element that
// will send the url encoded udo to a specified server if the feature is
// enabled in the config.
echo $helper->getDiagnosticTag($store);
